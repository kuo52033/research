from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_wine
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import GridSearchCV
import numpy as np
import pandas as pd
import graphviz
import matplotlib.pyplot as plt
import pyodbc

conn = pyodbc.connect('DRIVER={SQL Server Native Client 11.0}; SERVER=192.168.0.13\SQLEXPRESS; DATABASE=lol; UID=sa; PWD=a27336622')

query = "select win , fight.gameid , teamid , lane , winrate from fight join champion on champion.id = fight.champion join game on game.gameid = fight.gameid left join eachchamp_winrate as e on e.accountid = fight.accountid and e.champ_name = champion.champ_name where game.gameid not in(select distinct gameid from(select win , fight.gameid , teamid , lane , winrate from fight join champion on champion.id = fight.champion join game on game.gameid = fight.gameid left join eachchamp_winrate as e on e.accountid = fight.accountid and e.champ_name = champion.champ_name ) as a where a.winrate is NULL)order by gameid"
data = pd.read_sql(query, conn)

i = data["gameid"].unique().tolist() 
data["gameid"] = data["gameid"].apply(lambda x: i.index(x))
data.iloc[: , 0 ] = (data['win'] =='100').astype('int') #100 = 藍方(1) 200 = 紅方(0)
data.iloc[: , 2 ] = (data['teamid'] =='100').astype('int')

dic = {"win":[] , "top":[] , "mid":[], "ad":[] , "sup":[] , "jg":[] , "team":[] }
data2 = pd.DataFrame(dic)
data3 = pd.DataFrame(dic)

col = ["top" , "mid", "ad" , "sup" , "jg"]
lane = ["TOP" , "MIDDLE" , "ADC" , "SUPPORT" , "JUNGLE"]
for i , j in zip(col , lane):
    winrate = data.query(" lane == @j & teamid == 0")
    data2[i] = winrate.reset_index(drop = True)["winrate"]
win = data.query("lane == 'MIDDLE' & teamid ==0")
data2["win"] = win.reset_index(drop = True)["win"]
win = data.query("lane == 'MIDDLE'& teamid ==0")
data2["team"] = win.reset_index(drop = True)["teamid"]

for i , j in zip(col , lane):
    winrate = data.query(" lane == @j & teamid == 1")
    data3[i] = winrate.reset_index(drop = True)["winrate"]
win = data.query("lane == 'MIDDLE' & teamid ==1")
data3["win"] = win.reset_index(drop = True)["win"]
win = data.query("lane == 'MIDDLE'& teamid ==1")
data3["team"] = win.reset_index(drop = True)["teamid"]

summ = data2.append(data3).reset_index(drop = True)

fea = summ.iloc[: , summ.columns != 'win']
tar = summ.iloc[: , summ.columns == 'win']
xtrain , xtest ,ytrain , ytest = train_test_split(fea , tar , test_size = 0.3)
#index重新排序
for i in (xtrain , xtest ,ytrain , ytest):
    i.index = range(i.shape[0])

rfc = RandomForestClassifier( n_estimators=181 , random_state=11 )
rfc = rfc.fit(xtrain , ytrain.values.ravel())
score  = rfc.score(xtest , ytest)
score